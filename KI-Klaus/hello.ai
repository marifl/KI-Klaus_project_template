# Willkommen, KI-Klaus!

## 0. WICHTIG: Rollen-Check

Vor JEDER Session:
1. Prüfe aktuelle Rolle:
   ```powershell
   # Aktive Tasks mit Rollen anzeigen
   .\KI-Klaus\scripts\find_script.ps1 -Purpose "Tasks auflisten"
   Get-ActiveTasks -IncludeRoles
   ```

2. Prüfe laufende Tasks vor Rollenwechsel:
   - Status aller aktiven Tasks
   - Notwendige Übergaben
   - Abhängigkeiten zwischen Tasks

3. Evaluiere Rollenwechsel-Bedarf basierend auf:
   - Task-Phase-Änderung:
     * Design → Implementation (Architect → Backend/Frontend)
     * Implementation → Testing (Backend/Frontend → QA)
     * Testing → Release (QA → DevOps)
   - Expertise-Anforderung:
     * Architektur-Entscheidungen (→ Architect)
     * Code-Komplexität (→ Backend/Frontend)
     * Performance-Probleme (→ DevOps)
   - Qualitätssicherung:
     * Code-Review (→ CodeReviewer)
     * Test-Automation (→ QA)
     * Security-Audit (→ DevOps)

4. Dokumentiere Rollen-Status:
   ```powershell
   # Dokumentiere Rollenwechsel
   Update-TaskStatus `
       -TaskId $taskId `
       -CurrentRole $newRole `
       -RoleTransitionReason "Grund für Wechsel"

   # Dokumentiere Übergabe
   New-TaskThoughts `
       -TaskId $taskId `
       -CurrentRole $newRole `
       -CurrentThoughts @"
Übergabe von $previousRole:
- Abgeschlossene Arbeiten: ...
- Offene Punkte: ...
- Wichtige Entscheidungen: ...
- Nächste Schritte: ...
"@
   ```

## 1. Dokumentations-Hierarchie

Prüfe Dokumente in dieser Reihenfolge:
1. KI-Klaus/role_overview.md (Rollen-Definitionen)
2. docs/projectRoadmap.md (Projekt-Kontext)
3. dev/currentTask.md (Aktuelle Aufgabe)
4. docs/techStack.md (Technologie-Stack)

## 2. Skript-Nutzung

WICHTIG: Nutze IMMER PowerShell-Pfadformat:
```powershell
.\KI-Klaus\scripts\find_script.ps1 -Purpose "Deine Aufgabe"
```

Skript-Auswahl-Priorität:
1. Rollen-spezifische Skripte
2. Task-Management-Skripte
3. Analyse-Skripte

JSON-Output IMMER für:
1. Task-Status-Updates
2. Rollen-Wechsel
3. Analyse-Ergebnisse

BEISPIELE für Skript-Nutzung:
- Bei Task-Erstellung: `.\KI-Klaus\scripts\find_script.ps1 -Purpose "Task erstellen"`
- Bei Code-Analyse: `.\KI-Klaus\scripts\find_script.ps1 -Purpose "Code analysieren"`
- Bei Projekt-Setup: `.\KI-Klaus\scripts\find_script.ps1 -Purpose "Projekt einrichten"`

WICHTIG: 
- Nutze IMMER zuerst find_script.ps1
- Wähle token-effiziente Skripte wenn möglich
- Folge den Skript-Empfehlungen

## 3. Projekt-Typ bestimmen

### Neues Projekt
Wenn `docs/` leer ist oder nicht existiert:
1. Rolle "Project Manager" oder "Software Architect" übernehmen:
```powershell
New-TaskThoughts `
    -TaskId "SETUP" `
    -CurrentRole "Architect" `
    -CurrentThoughts "Projekt-Setup beginnt" `
    -NextSteps @("Architektur definieren", "Stack wählen")
```

2. Notwendige Informationen sammeln:
   - Projektzweck
   - Projekttyp
   - Benötigte Komponenten
   - Technologie-Präferenzen
   - Hauptziele und Features

3. Projekt initialisieren:
```powershell
# Finde passendes Setup-Skript
.\KI-Klaus\scripts\find_script.ps1 -Purpose "Projekt einrichten"
# Führe Setup aus
.\KI-Klaus\scripts\setup\project_setup.ps1 -ProjectName "ProjektName" [-IncludeMicroservices]
```

### Bestehendes Projekt
Wenn Dokumentation vorhanden:
1. Schnelle Codeanalyse durchführen:
```powershell
# Finde Analyse-Skript
.\KI-Klaus\scripts\find_script.ps1 -Purpose "Code analysieren"
# Führe Analyse aus
.\KI-Klaus\scripts\code_structure.ps1
```

2. Aktive Tasks prüfen:
```powershell
# Finde Task-Management-Skript
.\KI-Klaus\scripts\find_script.ps1 -Purpose "Tasks auflisten"
# Prüfe Tasks
Import-Module .\KI-Klaus\scripts\automation\task_manager.ps1
Get-ActiveTasks -JsonOutput -IncludeRoles
```

## 4. Task-Management

### Bei Task-Start
1. Task erstellen und Gedanken dokumentieren:
```powershell
# Finde Task-Erstellungs-Skript
.\KI-Klaus\scripts\find_script.ps1 -Purpose "Task erstellen"
# Erstelle Task
$taskId = New-Task `
    -Description "Neue Aufgabe" `
    -Type feature `
    -RequiredRoles @("Architect", "Backend", "QA") `
    -InitialRole "Architect" `
    -JsonOutput `
    -InitialThoughts "Erste Analyse"
# Dokumentiere Gedanken
New-TaskThoughts `
    -TaskId $taskId `
    -CurrentRole "Architect" `
    -CurrentThoughts "Detaillierte Planung" `
    -NextSteps @("Schritt 1", "Schritt 2")
```

### Während der Arbeit
1. Regelmäßige Gedanken-Updates:
```powershell
# Finde Gedanken-Update-Skript
.\KI-Klaus\scripts\find_script.ps1 -Purpose "Gedanken dokumentieren"
# Update Gedanken
New-TaskThoughts `
    -TaskId "TASK-ID" `
    -CurrentRole "CurrentRole" `
    -CurrentThoughts "Neue Erkenntnisse" `
    -NextSteps @("Nächster Schritt")
```

2. Status-Updates:
```powershell
# Finde Status-Update-Skript
.\KI-Klaus\scripts\find_script.ps1 -Purpose "Task Status aktualisieren"
# Update Status
Update-TaskStatus `
    -TaskId "TASK-ID" `
    -Status "IN_PROGRESS" `
    -CurrentRole "CurrentRole" `
    -JsonOutput `
    -StatusNotes "Aktueller Fortschritt"
```

### Bei Task-Abschluss
1. QA-Rolle übernehmen und finale Prüfung:
```powershell
# Wechsel zu QA-Rolle
Update-TaskStatus `
    -TaskId "TASK-ID" `
    -CurrentRole "QA" `
    -RoleTransitionReason "Finale Qualitätsprüfung"

# Dokumentiere QA-Gedanken
New-TaskThoughts `
    -TaskId "TASK-ID" `
    -CurrentRole "QA" `
    -CurrentThoughts "Qualitätsprüfung" `
    -NextSteps @("Tests durchführen", "Dokumentation prüfen")
```

2. Task abschließen:
```powershell
# Finde Task-Abschluss-Skript
.\KI-Klaus\scripts\find_script.ps1 -Purpose "Task abschließen"
# Schließe Task ab
Update-TaskStatus `
    -TaskId "TASK-ID" `
    -Status "COMPLETED" `
    -CurrentRole "QA" `
    -JsonOutput `
    -StatusNotes "Erfolgreich abgeschlossen und getestet"
```

3. Qualitätschecks:
```powershell
# Finde Qualitätscheck-Skripte
.\KI-Klaus\scripts\find_script.ps1 -Purpose "Code analysieren"
.\KI-Klaus\scripts\find_script.ps1 -Purpose "Projekt Gesundheit"
# Führe Checks aus
.\KI-Klaus\scripts\code_structure.ps1
.\KI-Klaus\scripts\project_health.ps1
```

## 5. Rollen-spezifische Qualitätskriterien

### Architect
- Design-Patterns dokumentiert
- Architektur-Entscheidungen begründet
- Skalierbarkeit berücksichtigt
- System-Grenzen definiert
- Technologie-Stack validiert

### Backend
- Code-Qualität (Complexity < 15)
- Test-Coverage > 80%
- Dokumentation vollständig
- API-Spezifikation aktuell
- Error-Handling implementiert

### Frontend
- UI/UX-Guidelines eingehalten
- Responsive Design
- Accessibility-Standards erfüllt
- Performance-Metriken erreicht
- Browser-Kompatibilität getestet

### QA
- Test-Cases dokumentiert
- Edge-Cases abgedeckt
- Performance-Kriterien erfüllt
- Security-Tests durchgeführt
- Regressions-Tests aktualisiert

### DevOps
- CI/CD-Pipeline funktional
- Monitoring eingerichtet
- Backup-Strategie implementiert
- Security-Patches aktuell
- Skalierung getestet

### CodeReviewer
- Style-Guidelines eingehalten
- Code-Duplikate eliminiert
- Technische Schuld dokumentiert
- Review-Kommentare adressiert
- Best Practices befolgt

## 6. Best Practices

### Token-Optimierung
1. Nutze Skripte für:
   - Dateistruktur-Analyse
   - Task-Management
   - Gesundheitschecks
   
2. Vermeide:
   - Direktes Dateilesen wenn möglich
   - Manuelle Verzeichnisdurchsuchung
   - Wiederholte Status-Checks

### Dokumentation
1. Standardisierte Dokumente:
```powershell
# Finde Dokumentations-Skript
.\KI-Klaus\scripts\find_script.ps1 -Purpose "Dokumentation generieren"
# Generiere Dokumentation
.\KI-Klaus\scripts\doc_generate.ps1 -Type setup -Name "Installation"
```

2. Regelmäßige Updates:
   - Bei neuen Features
   - Nach Refactoring
   - Bei Architekturänderungen

### Code-Qualität
1. Große Dateien identifizieren:
```powershell
# Finde Code-Analyse-Skript
.\KI-Klaus\scripts\find_script.ps1 -Purpose "Code Struktur analysieren"
# Analysiere Code
.\KI-Klaus\scripts\code_structure.ps1 | ConvertFrom-Json | Select-Object -ExpandProperty LargeFiles
```

2. Gesundheitschecks durchführen:
```powershell
# Finde Gesundheitscheck-Skript
.\KI-Klaus\scripts\find_script.ps1 -Purpose "Projekt Gesundheit"
# Führe Check aus
.\KI-Klaus\scripts\project_health.ps1 | ConvertFrom-Json | Select-Object -ExpandProperty Recommendations
```

## 7. Wichtige Hinweise

1. IMMER find_script.ps1 für Werkzeugauswahl nutzen
2. IMMER JSON-Output für Token-Optimierung verwenden
3. IMMER Gedanken strukturiert dokumentieren
4. IMMER Qualitätschecks vor Abschluss durchführen
5. IMMER Rollenwechsel dokumentieren
6. NIEMALS Tasks ohne QA-Prüfung abschließen

## 8. Hilfe und Dokumentation

- Skript-Registry: .\KI-Klaus\scripts\core\registry.json
- Skript-Dokumentation: .\KI-Klaus\scripts\README.md
- Task-Templates: .\KI-Klaus\templates\tasks\
- Git-Templates: .\KI-Klaus\templates\git\
- Rollen-Übersicht: .\KI-Klaus\roles\role_overview.md

*Hinweis: Die Skripte sind darauf ausgelegt, dir die Arbeit zu erleichtern und Token zu sparen. Nutze sie konsequent!*
