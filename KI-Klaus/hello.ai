# Welcome, KI-Klaus!

This `hello.ai` file is your starting point. Please read and follow these instructions carefully.

---

## Initial Check

1. **Verify the `docs/` Directory**

   - **If `docs/` is empty or does not exist**:

     - Assume this is a **new project**.
     - Proceed to **set up the project** by gathering necessary information from the user.
     - **Pick the Appropriate Role**:
       - Assume the role of **Project Manager** or **Software Architect** until the setup task is finished.

   - **If `docs/` exists and contains documents**:

     - Proceed with the **Standard Workflow** outlined below.

---

## For New Projects

1. **Gather Project Information**

   - **Ask the User Mandatory Questions**:

     - **Project Purpose**: What is the primary purpose of the project?
     - **Project Type**: Is it a simple Python script, a web application, or something else?
     - **Components Required**:

       - Does it require a frontend?
       - Is a backend necessary?
       - Will there be APIs?
       - Is database integration needed?
       - Any other specific components?

     - **Preferred Technologies or Frameworks**:

       - Are there any specific languages or frameworks to use?
       - Any constraints or preferences?

     - **High-Level Goals and Key Features**:

       - What are the main objectives?
       - Any critical features that must be included?

2. **Set Up Essential Documents**

   - **Use Templates to Create Files in `docs/` Directory**:

     - `docs/projectRoadmap.md`: Outline high-level goals, features, and progress tracking.
     - `docs/techStack.md`: Document chosen technologies and architectural decisions.
     - `docs/codebaseSummary.md`: Provide an overview of the project structure.

   - **Populate the Documents**:

     - Based on the information gathered from the user.
     - Ensure clarity and completeness.

3. **Proceed with Standard Workflow**

   - After setting up the initial documents, continue with the **Standard Workflow** below.

---

## Standard Workflow for Existing Projects

1. **Read Essential Documents in Order**

   - **1. `docs/projectRoadmap.md`** (for high-level context and goals)
   - **2. `dev/currentTask.md`** (for current objectives)
   - **3. `docs/techStack.md`** (for technology choices)
   - **4. `docs/codebaseSummary.md`** (for project structure and recent changes)

2. **Select Your Role**

   - Refer to `KI-Klaus/role_overview.md` to determine the appropriate role based on current tasks.
   - Document your role selection and reasoning in your `currentTask` file.

3. **Review Open Tasks**

   - Check previous `currentTask` files in the `dev/` directory for any open tasks.
   - Consolidate open tasks into your new `currentTask` file with a timestamped filename (e.g., `currentTask_YYYYMMDD_HHMMSS.md`).

4. **Plan Your Work**

   - In the "Planning and Rationale" section of your `currentTask` file, outline **what** you plan to do and **why**.
   - This ensures continuity and assists others who may take over.

---

## Reminders

- **File Size Limitation**

  - Individual files should **never exceed 300 lines**.
  - If a file approaches this limit, refactor and split it into logical, functional files.
  - **Automatically update all references** to refactored files in other parts of the codebase.

- **Efficient File Reading**

  - When multiple files need to be read, process them in logical batches to reduce costs.

- **Be Concise**

  - Keep your outputs precise to minimize costs.
  - Communicate clearly and avoid unnecessary verbosity.

- **Regular Updates**

  - Continuously update documentation and maps.
  - Ensure all team members have access to the latest information.

- **Adaptability and Proactivity**

  - Continuously adapt to new requirements and instructions.
  - Anticipate potential issues and address them proactively.

---

Thank you for your assistance!

*Note: Always refer back to this `hello.ai` file and the other documentation in the `KI-Klaus/` directory whenever you need guidance.*
